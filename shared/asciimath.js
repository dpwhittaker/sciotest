asciimath = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = null,
        peg$c1 = [],
        peg$c2 = "\n",
        peg$c3 = "\"\\n\"",
        peg$c4 = function(head, tail) { return tail.length > 0 ? tail[tail.length-1][1] : head; },
        peg$c5 = "deg",
        peg$c6 = "\"deg\"",
        peg$c7 = function() {
          		options.degMode = Math.PI / 180;
        			return {result: "degree Mode On", markup: {display: "inline-block", children: ["deg"]}};
        		},
        peg$c8 = "rad",
        peg$c9 = "\"rad\"",
        peg$c10 = function() {
        			options.degMode = 1;
        			return {result: "radian Mode On", markup: {display: "inline-block", children: ["rad"]}};
        		},
        peg$c11 = "=",
        peg$c12 = "\"=\"",
        peg$c13 = function(left, right) {
        			options[left.varName] = right.result;
        			var top = Math.max(left.top, right.top);
        			var bottom = Math.max(left.bottom, right.bottom);

        			return {result: right.result, markup:
        				'<div style="display:inline-block;line-height:1em">' +
        					'<div style="float:left;margin:{0}em 0 {1}em;">{2}</div>'.format(top-left.top, bottom-left.bottom, left.markup) +
        					'<div style="float:left;margin:{0}em {1}em {2}em;">=</div>'.format(top-0.5, operatorMargin, bottom-0.5) +
        					'<div style="float:left;margin:{0}em 0 {1}em;">{2}</div>'.format(top-right.top, bottom-right.bottom, right.markup) +
        				'</div>'
        			};
        		},
        peg$c14 = function(left) {
        			return {result: left.result, markup: '<div style="display:inline-block;line-height:1em">' + left.markup + '</div>'};
        		},
        peg$c15 = function(head, tail) {
        			if (tail.length == 0) return head;
        			var result = head.result;
        			var top = head.top, bottom = head.bottom;
        			for (var i = 0; i < tail.length; i++)
        			{
        				top = Math.max(top, tail[i][3].top);
        				bottom = Math.max(bottom, tail[i][3].bottom);
        			}
        			var markup = '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top-head.top, bottom-head.bottom, head.markup);
        			for (var i = 0; i < tail.length; i++)
        			{
        				var op = tail[i][1];
        				switch(op)
        				{
        					case "+-":	op = "±";	result = zip(result, tail[i][3].result, function(a, b) {return [a+b, a-b];}); break;
        					case "+":							result = zip(result, tail[i][3].result, function(a, b) {return a + b;}); break;
        					case "-":		op = "–";	result = zip(result, tail[i][3].result, function(a, b) {return a - b;}); break;
        				}
        				markup += '<div style="float:left;margin:{0}em {1}em {2}em">{3}</div>'.format(top-0.5, operatorMargin, bottom-0.5, op);
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top-tail[i][3].top, bottom-tail[i][3].bottom, tail[i][3].markup);
        			}
        			return {result: result, markup: markup, top: top, bottom: bottom};
        		},
        peg$c16 = "+-",
        peg$c17 = "\"+-\"",
        peg$c18 = "+",
        peg$c19 = "\"+\"",
        peg$c20 = "-",
        peg$c21 = "\"-\"",
        peg$c22 = function(head, tail) {
        			if (tail.length == 0) return head;
        			var result = head.result;
        			var terms = [head];
        			var ops = [];
        			for (var i = 0; i < tail.length; i++)
        			{
        				switch(tail[i][1])
        				{
        					case "*":
        					case "":
        						result = zip(result, tail[i][3].result, function(a, b) {return a * b;});
        						terms.push(tail[i][3]);
        						ops.push(tail[i][1]);
        						break;
        					case "/":
        						result = zip(result, tail[i][3].result, function(a, b) {return a / b;});
        						var left = terms[terms.length-1];
        						var right = tail[i][3];
        						terms[terms.length-1] = {
        							markup:	('<div style="float:left;">' +
        												'<div style="border-bottom:{0}em solid black;width:100%;text-align:center;height:{4}em">' +
        													'<div style="margin:0 {1}em;display:inline-block">{2}</div>' +
        												'</div>' +
        												'<div style="width:100%;text-align:center;height:{5}em">' +
        													'<div style="margin:0 {1}em;display:inline-block">{3}</div>' +
        												'</div>' +
        											'</div>').format(divisionLineHeight, operatorMargin, stripParens(left.markup), stripParens(right.markup),
        																			left.top+left.bottom, right.top+right.bottom),
        							top: left.top + left.bottom + divisionLineHeight/2,
        							bottom: right.top + right.bottom + divisionLineHeight/2
        						}
        						break;
        				}
        			}
        			var term = terms.shift();
        			var top = term.top, bottom = term.bottom;
        			for (var i = 0; i < terms.length; i++)
        			{
        				top = Math.max(top, terms[i].top);
        				bottom = Math.max(bottom, terms[i].bottom);
        			}
        			var markup = '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top-term.top, bottom-term.bottom, term.markup);
        			for (var i = 0; i < terms.length; i++)
        			{
        				if (ops[i] == "*") markup += '<div style="float:left;margin:{0}em {1}em {2}em">⋅</div>'.format(top-0.5, operatorMargin, bottom-0.5);
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top-terms[i].top, bottom-terms[i].bottom, terms[i].markup);
        			}
        			return {result: result, markup: markup, top: top, bottom: bottom};
        		},
        peg$c23 = "*",
        peg$c24 = "\"*\"",
        peg$c25 = "/",
        peg$c26 = "\"/\"",
        peg$c27 = "",
        peg$c28 = /^[\-\n]/,
        peg$c29 = "[\\-\\n]",
        peg$c30 = function(val) {
        			return {
        				result: zip(val.result, function(a) {return -a;}),
        				markup: '<div style="float:left;margin:{0}em 0 {1}em">-</div>{2}'.format(val.top-0.5, val.bottom-0.5, val.markup),
        				top: val.top,
        				bottom: val.bottom
        			};
        		},
        peg$c31 = "^",
        peg$c32 = "\"^\"",
        peg$c33 = function(left, right) {
        			var expHeight = (right.top + right.bottom) * subSupSize;
        			var bottom = left.top - subSupBase + left.bottom;
        			return {
        				result: zip(left.result, right.result, function(a, b) {return Math.pow(a, b);}),
        				markup: '<div style="float:left;margin:{0}em 0 0">{1}</div>'.format(expHeight - subSupBase, left.markup) +
        								'<div style="float:left;font-size:{0}em;line-height:1em;margin:0 0 {1}em">{2}</div>'
        								.format(subSupSize, bottom * subSupSize, stripParens(right.markup)),
        				top: left.top + expHeight - subSupBase,
        				bottom: left.bottom
        			};
        		},
        peg$c34 = function(fn) {
        			if (!("fn" in fn)) return fn;
        			var result = fn.result;
        			var val = fn.val;
        			fn = fn.fn.split("^");
        			var markup = "";
        			var top = val.top;
        			if (fn.length > 1)
        			{
        				var expTop = subSupSize + 0.5 - subSupBase;
        				var bottom = val.bottom + 0.5 - subSupBase;
        				top = Math.max(top, expTop);
        				markup = '<div style="float:left;font-size:{0}em;line-height:1em;margin:{1}em 0 {2}em">-1</div>'.format(subSupSize, top - expTop, bottom);
        			}
        			markup = '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>{3}'.format(val.top-0.5, val.bottom-0.5, fn[0], markup);
        			markup += '<div style="float:left;margin:{0}em 0 0">{1}</div>'.format(top-val.top, val.markup);
        			return {result: result, markup: markup, top:val.top, bottom: val.bottom};
        		},
        peg$c35 = "function",
        peg$c36 = function(fn, val) { return {result: zip(val.result, function(a) {return Math.asin(a) / options.degMode;}), fn:fn, val:val}; },
        peg$c37 = function(fn, val) { return {result: zip(val.result, function(a) {return Math.acos(a) / options.degMode;}), fn:fn, val:val}; },
        peg$c38 = function(fn, y, x) { return {result: zip(y.result, x.result, function(a,b) {return Math.atan2(a,b) / options.degMode;}), fn:fn, val:val}; },
        peg$c39 = function(fn, val) { return {result: zip(val.result, function(a) {return Math.atan(a) / options.degMode;}), fn:fn, val:val}; },
        peg$c40 = "sin",
        peg$c41 = "\"sin\"",
        peg$c42 = function(val) { return {result: zip(val.result, function(a) {return Math.sin(a * options.degMode);}), fn:"sin", val:val}; },
        peg$c43 = "cos",
        peg$c44 = "\"cos\"",
        peg$c45 = function(val) { return {result: zip(val.result, function(a) {return Math.cos(a * options.degMode);}), fn:"cos", val:val}; },
        peg$c46 = "tan",
        peg$c47 = "\"tan\"",
        peg$c48 = function(val) { return {result: zip(val.result, function(a) {return Math.tan(a * options.degMode);}), fn:"tan", val:val}; },
        peg$c49 = "csc",
        peg$c50 = "\"csc\"",
        peg$c51 = function(val) { return {result: zip(val.result, function(a) {return 1.0 / Math.sin(a * options.degMode);}), fn:"csc", val:val}; },
        peg$c52 = "sec",
        peg$c53 = "\"sec\"",
        peg$c54 = function(val) { return {result: zip(val.result, function(a) {return 1.0 / Math.cos(a * options.degMode);}), fn:"sec", val:val}; },
        peg$c55 = "cot",
        peg$c56 = "\"cot\"",
        peg$c57 = function(val) { return {result: zip(val.result, function(a) {return 1.0 / Math.tan(a * options.degMode);}), fn:"cot", val:val}; },
        peg$c58 = "sinh",
        peg$c59 = "\"sinh\"",
        peg$c60 = function(val) { return {result: zip(val.result, function(a) {return (Math.exp(a) - Math.exp(-a)) / 2;}), fn:"sinh", val:val}; },
        peg$c61 = "cosh",
        peg$c62 = "\"cosh\"",
        peg$c63 = function(val) { return {result: zip(val.result, function(a) {return (Math.exp(a) + Math.exp(-a)) / 2;}), fn:"cosh", val:val}; },
        peg$c64 = "tanh",
        peg$c65 = "\"tanh\"",
        peg$c66 = function(val) { return {result: zip(val.result, function(a) {return (Math.exp(2*a) - 1 ) / (Math.exp(2*a) + 1);}), fn:"tanh", val:val}; },
        peg$c67 = "csch",
        peg$c68 = "\"csch\"",
        peg$c69 = function(val) { return {result: zip(val.result, function(a) {return 2 / (Math.exp(a) - Math.exp(-a));}), fn:"csch", val:val}; },
        peg$c70 = "sech",
        peg$c71 = "\"sech\"",
        peg$c72 = function(val) { return {result: zip(val.result, function(a) {return 2 / (Math.exp(a) + Math.exp(-a));}), fn:"sech", val:val}; },
        peg$c73 = "coth",
        peg$c74 = "\"coth\"",
        peg$c75 = function(val) { return {result: zip(val.result, function(a) {return (Math.exp(2*a) + 1 ) / (Math.exp(2*a) - 1);}), fn:"coth", val:val}; },
        peg$c76 = "exp",
        peg$c77 = "\"exp\"",
        peg$c78 = function(val) {
        			var expHeight = (val.top + val.bottom) * subSupSize;
        			return {
        				result: zip(val.result, function(a) {return Math.exp(a);}), 
        				markup: '<div style="float:left;margin:{0}em 0 0;font-weight:bold">e</div>'.format(expHeight - subSupBase) +
        								'<div style="float:left;font-size:{0}em;line-height:1em;margin:0 0 {1}em">{2}</div>'
        								.format(subSupSize, (1.0 - subSupBase) / subSupSize, stripParens(right.markup)),
        				top: expHeight + 0.5 - subSupBase,
        				bottom: 0.5
        			};
        		},
        peg$c79 = function(fn) {
        			return {
        				result: fn.result,
        				markup: '<div style="float:left;border:0 solid black;border-width:0 0.1em 0;margin:{0}em {0}em; padding:0 {0}em">{1}</div>'
        								.format(operatorMargin, stripParens(fn.val.markup)),
        				top: fn.val.top + operatorMargin,
        				bottom: fn.val.bottom + operatorMargin
        			};
        		},
        peg$c80 = function(fn, val) { return {result: zip(val.result, function(a) {return Math.log(a);}), fn:fn, val:val}; },
        peg$c81 = "_",
        peg$c82 = "\"_\"",
        peg$c83 = function(fn, base, val) {
        			var baseBottom = subSupSize + 0.5 - subSupBase;
        			var bottom = Math.max(baseBottom, val.bottom);
        			return {
        				result: zip(val.result, base, function(a,b) {return Math.log(a) / Math.log(b);}),
        				markup: '<div style="float:left;margin:{0}em 0 {1}em">log</div>'.format(val.top - 0.5, bottom - 0.5) +
        								'<div style="float:left;font-size:{0}em;line-height:1em;margin:{1}em 0 {2}em">{3}</div>'
        								.format(subSupSize, (val.top + 0.5 - subSupBase) / subSupSize, (bottom - baseBottom) / subSupSize, base) +
        								'<div style="float:left;margin:0 0 {0}em">{1}</div>'.format(bottom - val.bottom, val.markup),
        				top: val.top,
        				bottom: bottom 
        			};
        		},
        peg$c84 = "sqrt",
        peg$c85 = "\"sqrt\"",
        peg$c86 = function(val) {
        			return {
        				result: zip(val.result, function(a) {return Math.sqrt(a);}),
        				markup: '<div style="float:left;font-size:{0}em;line-height:1em;">√</div>'.format(val.top + val.bottom + divisionLineHeight) +
        								'<div style="float:left;border-top:{0}em solid black">{1}</div>'.format(divisionLineHeight, stripParens(val.markup)),
        				top: val.top + divisionLineHeight,
        				bottom: val.bottom
        			};
        		},
        peg$c87 = "root",
        peg$c88 = "\"root\"",
        peg$c89 = function(n, val) {
        			return {
        				result:zip(val.result, function(a) {
        					if (a < 0 && n % 2 == 0) return NaN;
        					return (a < 0 ? -1 : 1) * Math.pow(Math.abs(a), 1.0 / n);
        				}),
        				markup: '<div style="float:left;font-size:{0}em;line-height:1em;position:relative">√'.format(val.top + val.bottom + divisionLineHeight) +
        								'<div style="position:absolute;top:0;right:.5em;font-size:0.4em;line-height:1em">{0}</div></div>'.format(n) +
        								'<div style="float:left;border-top:{0}em solid black">{1}</div>'.format(divisionLineHeight, stripParens(val.markup)),
        				top: val.top + divisionLineHeight,
        				bottom: val.bottom
        			};
        		},
        peg$c90 = "random",
        peg$c91 = "\"random\"",
        peg$c92 = ",",
        peg$c93 = "\",\"",
        peg$c94 = function(lower, upper, decimals) {
        			var hasDecimals = decimals.length > 0;
        			if (hasDecimals) decimals = decimals[2][0];
        			else decimals = 2;
        			decimalPow = Math.pow(10, decimals);
        			var result = zip(lower.result, upper.result, function(a, b) {
        				return Math.round((Math.random() * Math.abs(a-b) + Math.min(a, b)) * decimalPow) / decimalPow;
        			});
        			var top = Math.max(lower.top, upper.top);
        			var bottom = Math.max(lower.bottom, upper.bottom);
        			markup = '<div style="float:left;margin:{0}em 0 {1}em">random</div>'.format(top-0.5, bottom-0.5);
        			markup += '<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(top+bottom, left);
        			markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top - lower.top, bottom - lower.bottom, lower.markup);
        			markup += '<div style="float:left;margin:{0}em 0 {1}em">,</div>'.format(top - 0.5, bottom - 0.5);
        			markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top - upper.top, bottom - upper.bottom, upper.markup);
        			if (hasDecimals)
        			{
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">,</div>'.format(top - 0.5, bottom - 0.5);
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top - 0.5, bottom - 0.5, decimals);
        			}
        			markup += '<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(top+bottom, right);
        			return {result: result, markup: markup, top:val.top, bottom: val.bottom};
        		},
        peg$c95 = "choose",
        peg$c96 = "\"choose\"",
        peg$c97 = function(head, tail) {
        			tail.unshift([left, " ", head]);
        			var result = tail[Math.floor(Math.random() * tail.length)][2];
        			var top = 0, bottom = 0;
        			for (var i = 0; i < tail.length; i++)
        			{
        				top = Math.max(top, tail[i][2].top);
        				bottom = Math.max(bottom, tail[i][2].bottom);
        			}
        			markup = '<div style="float:left;margin:{0}em 0 {1}em">choose</div>'.format(top-0.5, bottom-0.5);
        			markup += '<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(top+bottom, left);
        			markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top - head.top, bottom - head.bottom, head.markup);
        			for (var i = 1; i < tail.length; i++)
        			{
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">,</div>'.format(top - 0.5, bottom - 0.5);
        				markup += '<div style="float:left;margin:{0}em 0 {1}em">{2}</div>'.format(top - tail[i][2].top, bottom - tail[i][2].bottom, tail[i][2].markup);
        			}
        			markup += '<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(top+bottom, right);
        			return {result: result, markup: markup, top:val.top, bottom: val.bottom};
        		},
        peg$c98 = "sin^-1",
        peg$c99 = "\"sin^-1\"",
        peg$c100 = "arcsin",
        peg$c101 = "\"arcsin\"",
        peg$c102 = "cos^-1",
        peg$c103 = "\"cos^-1\"",
        peg$c104 = "arccos",
        peg$c105 = "\"arccos\"",
        peg$c106 = "tan^-1",
        peg$c107 = "\"tan^-1\"",
        peg$c108 = "atan",
        peg$c109 = "\"atan\"",
        peg$c110 = "log",
        peg$c111 = "\"log\"",
        peg$c112 = "ln",
        peg$c113 = "\"ln\"",
        peg$c114 = "abs",
        peg$c115 = "\"abs\"",
        peg$c116 = function(val) { return {result: zip(val.result, function(a) {return Math.abs(a);}), val:val}; },
        peg$c117 = "|",
        peg$c118 = "\"|\"",
        peg$c119 = function(number) {
        			return {
        				result: number,
        				markup: '<div style="float:left">{0}</div>'.format(number),
        				top: 0.5,
        				bottom: 0.5
        			};
        		},
        peg$c120 = function(left, additive, right) {
        			return {
        				result: additive.result,
        				markup: '<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(additive.top+additive.bottom, left) +
        								additive.markup +
        								'<div style="float:left;font-size:{0}em;line-height:1em">{1}</div>'.format(additive.top+additive.bottom, right),
        				top: additive.top,
        				bottom: additive.bottom
        			};
        		},
        peg$c121 = "open parenthesis",
        peg$c122 = "(:",
        peg$c123 = "\"(:\"",
        peg$c124 = function() { return  "⟨"},
        peg$c125 = "[",
        peg$c126 = "\"[\"",
        peg$c127 = "{:",
        peg$c128 = "\"{:\"",
        peg$c129 = function() { return "" },
        peg$c130 = "(",
        peg$c131 = "\"(\"",
        peg$c132 = "{",
        peg$c133 = "\"{\"",
        peg$c134 = "close parenthesis",
        peg$c135 = ":)",
        peg$c136 = "\":)\"",
        peg$c137 = function() { return "⟩" },
        peg$c138 = "]",
        peg$c139 = "\"]\"",
        peg$c140 = ":}",
        peg$c141 = "\":}\"",
        peg$c142 = ")",
        peg$c143 = "\")\"",
        peg$c144 = "}",
        peg$c145 = "\"}\"",
        peg$c146 = "\"",
        peg$c147 = "\"\\\"\"",
        peg$c148 = "variable",
        peg$c149 = function(left, right) {
        			var varName = left+"_"+right;
        			var result = varName + ' undefined';
        			if (options.hasOwnProperty(varName)) result = options[varName];
        			return {
        				varName: varName,
        				result: result,
        				markup: (	
        					'<div style="float:left;font-style:italic">{0}</div>' +
        					'<div style="float:left;font-size:{2}em;line-height:1em;margin:{2}em 0 0;font-style:italic">{3}</div>'
        					).format(left, subSupSize, (1-subSupBase) / subSupSize, right),
        				top: 0.5,
        				bottom: subSupSize + 0.5 - subSupBase
        			};
        		},
        peg$c150 = function(left, right) {
        			var varName = left+"_"+right;
        			var result = varName + ' undefined';
        			if (options.hasOwnProperty(varName)) result = options[varName];
        			return {
        				varName: varName,
        				result: result,
        				markup: (
        					'<div style="float:left;font-style:italic">{0}</div>' +
        					'<div style="float:left;font-size:{1}em;line-height:1em;margin:{2}em 0 0">{3}</div>'
        					).format(left, subSupSize, (1-subSupBase) / subSupSize, right),
        				top: 0.5,
        				bottom: subSupSize + 0.5 - subSupBase
        			};
        		},
        peg$c151 = function(left) {
        			var varName = left;
        			var result = varName + ' undefined';
        			if (options.hasOwnProperty(varName)) result = options[varName];
        			return {
        				varName: varName,
        				result: result,
        				markup: '<div style="float:left;font-style:italic">{0}</div>'.format(left),
        				top: 0.5,
        				bottom: 0.5
        			};
        		},
        peg$c152 = function() {
        			return {
        				varName: "?",
        				result: "?",
        				markup: '<div style="float:left;font-style:italic">?</div>',
        				top: 0.5,
        				bottom: 0.5
        			};
        		},
        peg$c153 = "number",
        peg$c154 = /^[0-9]/,
        peg$c155 = "[0-9]",
        peg$c156 = "letter",
        peg$c157 = "alpha",
        peg$c158 = "\"alpha\"",
        peg$c159 = "beta",
        peg$c160 = "\"beta\"",
        peg$c161 = "chi",
        peg$c162 = "\"chi\"",
        peg$c163 = "delta",
        peg$c164 = "\"delta\"",
        peg$c165 = "Delta",
        peg$c166 = "\"Delta\"",
        peg$c167 = "epsilon",
        peg$c168 = "\"epsilon\"",
        peg$c169 = "varepsilon",
        peg$c170 = "\"varepsilon\"",
        peg$c171 = "eta",
        peg$c172 = "\"eta\"",
        peg$c173 = "gamma",
        peg$c174 = "\"gamma\"",
        peg$c175 = "Gamma",
        peg$c176 = "\"Gamma\"",
        peg$c177 = "iota",
        peg$c178 = "\"iota\"",
        peg$c179 = "kappa",
        peg$c180 = "\"kappa\"",
        peg$c181 = "lambda",
        peg$c182 = "\"lambda\"",
        peg$c183 = "Lambda",
        peg$c184 = "\"Lambda\"",
        peg$c185 = "mu",
        peg$c186 = "\"mu\"",
        peg$c187 = "nu",
        peg$c188 = "\"nu\"",
        peg$c189 = "omega",
        peg$c190 = "\"omega\"",
        peg$c191 = "Omega",
        peg$c192 = "\"Omega\"",
        peg$c193 = "phi",
        peg$c194 = "\"phi\"",
        peg$c195 = "varphi",
        peg$c196 = "\"varphi\"",
        peg$c197 = "Phi",
        peg$c198 = "\"Phi\"",
        peg$c199 = "pi",
        peg$c200 = "\"pi\"",
        peg$c201 = "Pi",
        peg$c202 = "\"Pi\"",
        peg$c203 = "psi",
        peg$c204 = "\"psi\"",
        peg$c205 = "Psi",
        peg$c206 = "\"Psi\"",
        peg$c207 = "rho",
        peg$c208 = "\"rho\"",
        peg$c209 = "sigma",
        peg$c210 = "\"sigma\"",
        peg$c211 = "Sigma",
        peg$c212 = "\"Sigma\"",
        peg$c213 = "tau",
        peg$c214 = "\"tau\"",
        peg$c215 = "theta",
        peg$c216 = "\"theta\"",
        peg$c217 = "vartheta",
        peg$c218 = "\"vartheta\"",
        peg$c219 = "Theta",
        peg$c220 = "\"Theta\"",
        peg$c221 = "upsilon",
        peg$c222 = "\"upsilon\"",
        peg$c223 = "xi",
        peg$c224 = "\"xi\"",
        peg$c225 = "Xi",
        peg$c226 = "\"Xi\"",
        peg$c227 = "zeta",
        peg$c228 = "\"zeta\"",
        peg$c229 = /^[A-Za-z]/,
        peg$c230 = "[A-Za-z]",
        peg$c231 = "integer",
        peg$c232 = function(digits) { return [parseInt(digits, 10)]; },
        peg$c233 = "decimal",
        peg$c234 = ".",
        peg$c235 = "\".\"",
        peg$c236 = function(left) { return [parseFloat(left)]; },
        peg$c237 = " ",
        peg$c238 = "\" \"",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i = 0;

      expected.sort();

      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c2;
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      while (s2 !== null) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c2;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
      }
      if (s1 !== null) {
        s2 = peg$parsestatement();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          if (input.charCodeAt(peg$currPos) === 10) {
            s6 = peg$c2;
            peg$currPos++;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s6 !== null) {
            while (s6 !== null) {
              s5.push(s6);
              if (input.charCodeAt(peg$currPos) === 10) {
                s6 = peg$c2;
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== null) {
            s6 = peg$parsestatement();
            if (s6 !== null) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            if (input.charCodeAt(peg$currPos) === 10) {
              s6 = peg$c2;
              peg$currPos++;
            } else {
              s6 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s6 !== null) {
              while (s6 !== null) {
                s5.push(s6);
                if (input.charCodeAt(peg$currPos) === 10) {
                  s6 = peg$c2;
                  peg$currPos++;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
              }
            } else {
              s5 = peg$c0;
            }
            if (s5 !== null) {
              s6 = peg$parsestatement();
              if (s6 !== null) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== null) {
            s4 = [];
            if (input.charCodeAt(peg$currPos) === 10) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            while (s5 !== null) {
              s4.push(s5);
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
            }
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c4(s2, s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c7();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c8) {
          s1 = peg$c8;
          peg$currPos += 3;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c10();
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parsevariable();
          if (s1 !== null) {
            s2 = peg$parse_();
            if (s2 !== null) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c11;
                peg$currPos++;
              } else {
                s3 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s3 !== null) {
                s4 = peg$parse_();
                if (s4 !== null) {
                  s5 = peg$parseadditive();
                  if (s5 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c13(s1, s5);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parseadditive();
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c14(s1);
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseadditive() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicative();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          s5 = peg$parseaddOp();
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsemultiplicative();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            s5 = peg$parseaddOp();
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsemultiplicative();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c15(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseaddOp() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 2;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s0 = peg$c18;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s0 === null) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s0 = peg$c20;
            peg$currPos++;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
        }
      }

      return s0;
    }

    function peg$parsemultiplicative() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsenegative();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== null) {
          s5 = peg$parsemultOp();
          if (s5 !== null) {
            s6 = peg$parse_();
            if (s6 !== null) {
              s7 = peg$parsenegative();
              if (s7 !== null) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 !== null) {
            s5 = peg$parsemultOp();
            if (s5 !== null) {
              s6 = peg$parse_();
              if (s6 !== null) {
                s7 = peg$parsenegative();
                if (s7 !== null) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c22(s1, s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemultOp() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c23;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s0 = peg$c25;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s0 === null) {
          s0 = peg$currPos;
          peg$silentFails++;
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          peg$silentFails--;
          if (s1 === null) {
            s0 = peg$c27;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parsenegative() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parseexponential();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c30(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$parseexponential();
      }

      return s0;
    }

    function peg$parseexponential() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseunary();
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          if (input.charCodeAt(peg$currPos) === 94) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s3 !== null) {
            s4 = peg$parse_();
            if (s4 !== null) {
              s5 = peg$parseexponential();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c33(s1, s5);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$parseunary();
      }

      return s0;
    }

    function peg$parseunary() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsefunction();
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        s0 = peg$parseprimary();
      }

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseasin();
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parseprimary();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c36(s1, s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parseacos();
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            s3 = peg$parseprimary();
            if (s3 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c37(s1, s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseatan();
          if (s1 !== null) {
            s2 = peg$parse_();
            if (s2 !== null) {
              s3 = peg$parseleft();
              if (s3 !== null) {
                s4 = peg$parse_();
                if (s4 !== null) {
                  s5 = peg$parsenegative();
                  if (s5 !== null) {
                    s6 = peg$parse_();
                    if (s6 !== null) {
                      if (input.charCodeAt(peg$currPos) === 47) {
                        s7 = peg$c25;
                        peg$currPos++;
                      } else {
                        s7 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                      }
                      if (s7 !== null) {
                        s8 = peg$parse_();
                        if (s8 !== null) {
                          s9 = peg$parsenegative();
                          if (s9 !== null) {
                            s10 = peg$parse_();
                            if (s10 !== null) {
                              s11 = peg$parseright();
                              if (s11 !== null) {
                                peg$reportedPos = s0;
                                s1 = peg$c38(s1, s5, s9);
                                if (s1 === null) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parseatan();
            if (s1 !== null) {
              s2 = peg$parse_();
              if (s2 !== null) {
                s3 = peg$parseprimary();
                if (s3 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c39(s1, s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c40) {
                s1 = peg$c40;
                peg$currPos += 3;
              } else {
                s1 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
              }
              if (s1 !== null) {
                s2 = peg$parse_();
                if (s2 !== null) {
                  s3 = peg$parseprimary();
                  if (s3 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c42(s3);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === null) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c43) {
                  s1 = peg$c43;
                  peg$currPos += 3;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
                if (s1 !== null) {
                  s2 = peg$parse_();
                  if (s2 !== null) {
                    s3 = peg$parseprimary();
                    if (s3 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c45(s3);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === null) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 3) === peg$c46) {
                    s1 = peg$c46;
                    peg$currPos += 3;
                  } else {
                    s1 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c47); }
                  }
                  if (s1 !== null) {
                    s2 = peg$parse_();
                    if (s2 !== null) {
                      s3 = peg$parseprimary();
                      if (s3 !== null) {
                        peg$reportedPos = s0;
                        s1 = peg$c48(s3);
                        if (s1 === null) {
                          peg$currPos = s0;
                          s0 = s1;
                        } else {
                          s0 = s1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === null) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c49) {
                      s1 = peg$c49;
                      peg$currPos += 3;
                    } else {
                      s1 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                    if (s1 !== null) {
                      s2 = peg$parse_();
                      if (s2 !== null) {
                        s3 = peg$parseprimary();
                        if (s3 !== null) {
                          peg$reportedPos = s0;
                          s1 = peg$c51(s3);
                          if (s1 === null) {
                            peg$currPos = s0;
                            s0 = s1;
                          } else {
                            s0 = s1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === null) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c52) {
                        s1 = peg$c52;
                        peg$currPos += 3;
                      } else {
                        s1 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c53); }
                      }
                      if (s1 !== null) {
                        s2 = peg$parse_();
                        if (s2 !== null) {
                          s3 = peg$parseprimary();
                          if (s3 !== null) {
                            peg$reportedPos = s0;
                            s1 = peg$c54(s3);
                            if (s1 === null) {
                              peg$currPos = s0;
                              s0 = s1;
                            } else {
                              s0 = s1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === null) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c55) {
                          s1 = peg$c55;
                          peg$currPos += 3;
                        } else {
                          s1 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c56); }
                        }
                        if (s1 !== null) {
                          s2 = peg$parse_();
                          if (s2 !== null) {
                            s3 = peg$parseprimary();
                            if (s3 !== null) {
                              peg$reportedPos = s0;
                              s1 = peg$c57(s3);
                              if (s1 === null) {
                                peg$currPos = s0;
                                s0 = s1;
                              } else {
                                s0 = s1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === null) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 4) === peg$c58) {
                            s1 = peg$c58;
                            peg$currPos += 4;
                          } else {
                            s1 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c59); }
                          }
                          if (s1 !== null) {
                            s2 = peg$parse_();
                            if (s2 !== null) {
                              s3 = peg$parseprimary();
                              if (s3 !== null) {
                                peg$reportedPos = s0;
                                s1 = peg$c60(s3);
                                if (s1 === null) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === null) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 4) === peg$c61) {
                              s1 = peg$c61;
                              peg$currPos += 4;
                            } else {
                              s1 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c62); }
                            }
                            if (s1 !== null) {
                              s2 = peg$parse_();
                              if (s2 !== null) {
                                s3 = peg$parseprimary();
                                if (s3 !== null) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c63(s3);
                                  if (s1 === null) {
                                    peg$currPos = s0;
                                    s0 = s1;
                                  } else {
                                    s0 = s1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === null) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 4) === peg$c64) {
                                s1 = peg$c64;
                                peg$currPos += 4;
                              } else {
                                s1 = null;
                                if (peg$silentFails === 0) { peg$fail(peg$c65); }
                              }
                              if (s1 !== null) {
                                s2 = peg$parse_();
                                if (s2 !== null) {
                                  s3 = peg$parseprimary();
                                  if (s3 !== null) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c66(s3);
                                    if (s1 === null) {
                                      peg$currPos = s0;
                                      s0 = s1;
                                    } else {
                                      s0 = s1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === null) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 4) === peg$c67) {
                                  s1 = peg$c67;
                                  peg$currPos += 4;
                                } else {
                                  s1 = null;
                                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
                                }
                                if (s1 !== null) {
                                  s2 = peg$parse_();
                                  if (s2 !== null) {
                                    s3 = peg$parseprimary();
                                    if (s3 !== null) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c69(s3);
                                      if (s1 === null) {
                                        peg$currPos = s0;
                                        s0 = s1;
                                      } else {
                                        s0 = s1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === null) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 4) === peg$c70) {
                                    s1 = peg$c70;
                                    peg$currPos += 4;
                                  } else {
                                    s1 = null;
                                    if (peg$silentFails === 0) { peg$fail(peg$c71); }
                                  }
                                  if (s1 !== null) {
                                    s2 = peg$parse_();
                                    if (s2 !== null) {
                                      s3 = peg$parseprimary();
                                      if (s3 !== null) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c72(s3);
                                        if (s1 === null) {
                                          peg$currPos = s0;
                                          s0 = s1;
                                        } else {
                                          s0 = s1;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === null) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 4) === peg$c73) {
                                      s1 = peg$c73;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = null;
                                      if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                    }
                                    if (s1 !== null) {
                                      s2 = peg$parse_();
                                      if (s2 !== null) {
                                        s3 = peg$parseprimary();
                                        if (s3 !== null) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c75(s3);
                                          if (s1 === null) {
                                            peg$currPos = s0;
                                            s0 = s1;
                                          } else {
                                            s0 = s1;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === null) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 3) === peg$c76) {
                                        s1 = peg$c76;
                                        peg$currPos += 3;
                                      } else {
                                        s1 = null;
                                        if (peg$silentFails === 0) { peg$fail(peg$c77); }
                                      }
                                      if (s1 !== null) {
                                        s2 = peg$parse_();
                                        if (s2 !== null) {
                                          s3 = peg$parseprimary();
                                          if (s3 !== null) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c78(s3);
                                            if (s1 === null) {
                                              peg$currPos = s0;
                                              s0 = s1;
                                            } else {
                                              s0 = s1;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                      if (s0 === null) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseabs();
                                        if (s1 !== null) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c79(s1);
                                        }
                                        if (s1 === null) {
                                          peg$currPos = s0;
                                          s0 = s1;
                                        } else {
                                          s0 = s1;
                                        }
                                        if (s0 === null) {
                                          s0 = peg$currPos;
                                          s1 = peg$parselog();
                                          if (s1 !== null) {
                                            s2 = peg$parse_();
                                            if (s2 !== null) {
                                              s3 = peg$parseprimary();
                                              if (s3 !== null) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c80(s1, s3);
                                                if (s1 === null) {
                                                  peg$currPos = s0;
                                                  s0 = s1;
                                                } else {
                                                  s0 = s1;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                          if (s0 === null) {
                                            s0 = peg$currPos;
                                            s1 = peg$parselog();
                                            if (s1 !== null) {
                                              s2 = peg$parse_();
                                              if (s2 !== null) {
                                                if (input.charCodeAt(peg$currPos) === 95) {
                                                  s3 = peg$c81;
                                                  peg$currPos++;
                                                } else {
                                                  s3 = null;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                }
                                                if (s3 !== null) {
                                                  s4 = peg$parseinteger();
                                                  if (s4 !== null) {
                                                    s5 = peg$parse_();
                                                    if (s5 !== null) {
                                                      s6 = peg$parseprimary();
                                                      if (s6 !== null) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c83(s1, s4, s6);
                                                        if (s1 === null) {
                                                          peg$currPos = s0;
                                                          s0 = s1;
                                                        } else {
                                                          s0 = s1;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                            if (s0 === null) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 4) === peg$c84) {
                                                s1 = peg$c84;
                                                peg$currPos += 4;
                                              } else {
                                                s1 = null;
                                                if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                              }
                                              if (s1 !== null) {
                                                s2 = peg$parse_();
                                                if (s2 !== null) {
                                                  s3 = peg$parseprimary();
                                                  if (s3 !== null) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c86(s3);
                                                    if (s1 === null) {
                                                      peg$currPos = s0;
                                                      s0 = s1;
                                                    } else {
                                                      s0 = s1;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                              if (s0 === null) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 4) === peg$c87) {
                                                  s1 = peg$c87;
                                                  peg$currPos += 4;
                                                } else {
                                                  s1 = null;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                                }
                                                if (s1 !== null) {
                                                  s2 = peg$parse_();
                                                  if (s2 !== null) {
                                                    s3 = peg$parseinteger();
                                                    if (s3 !== null) {
                                                      s4 = peg$parse_();
                                                      if (s4 !== null) {
                                                        s5 = peg$parseprimary();
                                                        if (s5 !== null) {
                                                          peg$reportedPos = s0;
                                                          s1 = peg$c89(s3, s5);
                                                          if (s1 === null) {
                                                            peg$currPos = s0;
                                                            s0 = s1;
                                                          } else {
                                                            s0 = s1;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                                if (s0 === null) {
                                                  s0 = peg$currPos;
                                                  if (input.substr(peg$currPos, 6) === peg$c90) {
                                                    s1 = peg$c90;
                                                    peg$currPos += 6;
                                                  } else {
                                                    s1 = null;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                                  }
                                                  if (s1 !== null) {
                                                    s2 = peg$parse_();
                                                    if (s2 !== null) {
                                                      s3 = peg$parseleft();
                                                      if (s3 !== null) {
                                                        s4 = peg$parseadditive();
                                                        if (s4 !== null) {
                                                          s5 = peg$parse_();
                                                          if (s5 !== null) {
                                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                              s6 = peg$c92;
                                                              peg$currPos++;
                                                            } else {
                                                              s6 = null;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                                            }
                                                            if (s6 !== null) {
                                                              s7 = peg$parse_();
                                                              if (s7 !== null) {
                                                                s8 = peg$parseadditive();
                                                                if (s8 !== null) {
                                                                  s9 = peg$parse_();
                                                                  if (s9 !== null) {
                                                                    s10 = peg$currPos;
                                                                    if (input.charCodeAt(peg$currPos) === 44) {
                                                                      s11 = peg$c92;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s11 = null;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                                                    }
                                                                    if (s11 !== null) {
                                                                      s12 = peg$parse_();
                                                                      if (s12 !== null) {
                                                                        s13 = peg$parseinteger();
                                                                        if (s13 !== null) {
                                                                          s11 = [s11, s12, s13];
                                                                          s10 = s11;
                                                                        } else {
                                                                          peg$currPos = s10;
                                                                          s10 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s10;
                                                                        s10 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s10;
                                                                      s10 = peg$c0;
                                                                    }
                                                                    if (s10 === null) {
                                                                      s10 = peg$c27;
                                                                    }
                                                                    if (s10 !== null) {
                                                                      s11 = peg$parse_();
                                                                      if (s11 !== null) {
                                                                        s12 = peg$parseright();
                                                                        if (s12 !== null) {
                                                                          peg$reportedPos = s0;
                                                                          s1 = peg$c94(s4, s8, s10);
                                                                          if (s1 === null) {
                                                                            peg$currPos = s0;
                                                                            s0 = s1;
                                                                          } else {
                                                                            s0 = s1;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                  if (s0 === null) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 6) === peg$c95) {
                                                      s1 = peg$c95;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s1 = null;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c96); }
                                                    }
                                                    if (s1 !== null) {
                                                      s2 = peg$parse_();
                                                      if (s2 !== null) {
                                                        s3 = peg$parseleft();
                                                        if (s3 !== null) {
                                                          s4 = peg$parse_();
                                                          if (s4 !== null) {
                                                            s5 = peg$parseadditive();
                                                            if (s5 !== null) {
                                                              s6 = peg$parse_();
                                                              if (s6 !== null) {
                                                                s7 = [];
                                                                s8 = peg$currPos;
                                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                                  s9 = peg$c92;
                                                                  peg$currPos++;
                                                                } else {
                                                                  s9 = null;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                                                }
                                                                if (s9 !== null) {
                                                                  s10 = peg$parse_();
                                                                  if (s10 !== null) {
                                                                    s11 = peg$parseadditive();
                                                                    if (s11 !== null) {
                                                                      s9 = [s9, s10, s11];
                                                                      s8 = s9;
                                                                    } else {
                                                                      peg$currPos = s8;
                                                                      s8 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s8;
                                                                    s8 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s8;
                                                                  s8 = peg$c0;
                                                                }
                                                                while (s8 !== null) {
                                                                  s7.push(s8);
                                                                  s8 = peg$currPos;
                                                                  if (input.charCodeAt(peg$currPos) === 44) {
                                                                    s9 = peg$c92;
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s9 = null;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                                                  }
                                                                  if (s9 !== null) {
                                                                    s10 = peg$parse_();
                                                                    if (s10 !== null) {
                                                                      s11 = peg$parseadditive();
                                                                      if (s11 !== null) {
                                                                        s9 = [s9, s10, s11];
                                                                        s8 = s9;
                                                                      } else {
                                                                        peg$currPos = s8;
                                                                        s8 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s8;
                                                                      s8 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s8;
                                                                    s8 = peg$c0;
                                                                  }
                                                                }
                                                                if (s7 !== null) {
                                                                  s8 = peg$parse_();
                                                                  if (s8 !== null) {
                                                                    s9 = peg$parseright();
                                                                    if (s9 !== null) {
                                                                      peg$reportedPos = s0;
                                                                      s1 = peg$c97(s5, s7);
                                                                      if (s1 === null) {
                                                                        peg$currPos = s0;
                                                                        s0 = s1;
                                                                      } else {
                                                                        s0 = s1;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      return s0;
    }

    function peg$parseasin() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c98) {
        s0 = peg$c98;
        peg$currPos += 6;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 6) === peg$c100) {
          s0 = peg$c100;
          peg$currPos += 6;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
      }

      return s0;
    }

    function peg$parseacos() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c102) {
        s0 = peg$c102;
        peg$currPos += 6;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 6) === peg$c104) {
          s0 = peg$c104;
          peg$currPos += 6;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
      }

      return s0;
    }

    function peg$parseatan() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c106) {
        s0 = peg$c106;
        peg$currPos += 6;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c107); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 4) === peg$c108) {
          s0 = peg$c108;
          peg$currPos += 4;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
      }

      return s0;
    }

    function peg$parselog() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c110) {
        s0 = peg$c110;
        peg$currPos += 3;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 2) === peg$c112) {
          s0 = peg$c112;
          peg$currPos += 2;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
      }

      return s0;
    }

    function peg$parseabs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c114) {
        s1 = peg$c114;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s1 !== null) {
        s2 = peg$parse_();
        if (s2 !== null) {
          s3 = peg$parseprimary();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c116(s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s1 = peg$c117;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s1 !== null) {
          s2 = peg$parse_();
          if (s2 !== null) {
            s3 = peg$parseadditive();
            if (s3 !== null) {
              s4 = peg$parse_();
              if (s4 !== null) {
                if (input.charCodeAt(peg$currPos) === 124) {
                  s5 = peg$c117;
                  peg$currPos++;
                } else {
                  s5 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c118); }
                }
                if (s5 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c116(s3);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseprimary() {
      var s0, s1, s2, s3;

      s0 = peg$parsevariable();
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c119(s1);
        }
        if (s1 === null) {
          peg$currPos = s0;
          s0 = s1;
        } else {
          s0 = s1;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parseleft();
          if (s1 !== null) {
            s2 = peg$parseadditive();
            if (s2 !== null) {
              s3 = peg$parseright();
              if (s3 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c120(s1, s2, s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
      }

      return s0;
    }

    function peg$parseleft() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c122) {
        s1 = peg$c122;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c124();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s0 = peg$c125;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c126); }
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c127) {
            s1 = peg$c127;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c128); }
          }
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c129();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s0 = peg$c130;
              peg$currPos++;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c131); }
            }
            if (s0 === null) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s0 = peg$c132;
                peg$currPos++;
              } else {
                s0 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }

      return s0;
    }

    function peg$parseright() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c135) {
        s1 = peg$c135;
        peg$currPos += 2;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c137();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s0 = peg$c138;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s0 === null) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c140) {
            s1 = peg$c140;
            peg$currPos += 2;
          } else {
            s1 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
          if (s1 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c129();
          }
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
          if (s0 === null) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s0 = peg$c142;
              peg$currPos++;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c143); }
            }
            if (s0 === null) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s0 = peg$c144;
                peg$currPos++;
              } else {
                s0 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c145); }
              }
              if (s0 === null) {
                s0 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 10) {
                  s1 = peg$c2;
                  peg$currPos++;
                } else {
                  s1 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c3); }
                }
                peg$silentFails--;
                if (s1 !== null) {
                  peg$currPos = s0;
                  s0 = peg$c27;
                } else {
                  s0 = peg$c0;
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }

      return s0;
    }

    function peg$parseleftsub() {
      var s0;

      s0 = peg$parseleft();
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c146;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }

      return s0;
    }

    function peg$parserightsub() {
      var s0;

      s0 = peg$parseright();
      if (s0 === null) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c146;
          peg$currPos++;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== null) {
        s2 = peg$parseprimary();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c30(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === null) {
        s0 = peg$currPos;
        s1 = peg$parsealpha();
        if (s1 !== null) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c81;
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
          if (s2 !== null) {
            s3 = peg$parseleftsub();
            if (s3 !== null) {
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parsealphanum();
              if (s6 !== null) {
                while (s6 !== null) {
                  s5.push(s6);
                  s6 = peg$parsealphanum();
                }
              } else {
                s5 = peg$c0;
              }
              if (s5 !== null) {
                s5 = input.substring(s4, peg$currPos);
              }
              s4 = s5;
              if (s4 !== null) {
                s5 = peg$parserightsub();
                if (s5 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c149(s1, s4);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === null) {
          s0 = peg$currPos;
          s1 = peg$parsealpha();
          if (s1 !== null) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s2 = peg$c81;
              peg$currPos++;
            } else {
              s2 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
            if (s2 !== null) {
              s3 = peg$parsealphanum();
              if (s3 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c150(s1, s3);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === null) {
            s0 = peg$currPos;
            s1 = peg$parsealpha();
            if (s1 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c151(s1);
            }
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
            if (s0 === null) {
              s0 = peg$currPos;
              s1 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 10) {
                s2 = peg$c2;
                peg$currPos++;
              } else {
                s2 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              peg$silentFails--;
              if (s2 !== null) {
                peg$currPos = s1;
                s1 = peg$c27;
              } else {
                s1 = peg$c0;
              }
              if (s1 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c152();
              }
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parsealphanum() {
      var s0;

      s0 = peg$parsealpha();
      if (s0 === null) {
        s0 = peg$parsenumeric();
      }

      return s0;
    }

    function peg$parsenumeric() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c154.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parsealpha() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 5) === peg$c157) {
        s0 = peg$c157;
        peg$currPos += 5;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 4) === peg$c159) {
          s0 = peg$c159;
          peg$currPos += 4;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c160); }
        }
        if (s0 === null) {
          if (input.substr(peg$currPos, 3) === peg$c161) {
            s0 = peg$c161;
            peg$currPos += 3;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
          if (s0 === null) {
            if (input.substr(peg$currPos, 5) === peg$c163) {
              s0 = peg$c163;
              peg$currPos += 5;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c164); }
            }
            if (s0 === null) {
              if (input.substr(peg$currPos, 5) === peg$c165) {
                s0 = peg$c165;
                peg$currPos += 5;
              } else {
                s0 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c166); }
              }
              if (s0 === null) {
                if (input.substr(peg$currPos, 7) === peg$c167) {
                  s0 = peg$c167;
                  peg$currPos += 7;
                } else {
                  s0 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c168); }
                }
                if (s0 === null) {
                  if (input.substr(peg$currPos, 10) === peg$c169) {
                    s0 = peg$c169;
                    peg$currPos += 10;
                  } else {
                    s0 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c170); }
                  }
                  if (s0 === null) {
                    if (input.substr(peg$currPos, 3) === peg$c171) {
                      s0 = peg$c171;
                      peg$currPos += 3;
                    } else {
                      s0 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c172); }
                    }
                    if (s0 === null) {
                      if (input.substr(peg$currPos, 5) === peg$c173) {
                        s0 = peg$c173;
                        peg$currPos += 5;
                      } else {
                        s0 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c174); }
                      }
                      if (s0 === null) {
                        if (input.substr(peg$currPos, 5) === peg$c175) {
                          s0 = peg$c175;
                          peg$currPos += 5;
                        } else {
                          s0 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c176); }
                        }
                        if (s0 === null) {
                          if (input.substr(peg$currPos, 4) === peg$c177) {
                            s0 = peg$c177;
                            peg$currPos += 4;
                          } else {
                            s0 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c178); }
                          }
                          if (s0 === null) {
                            if (input.substr(peg$currPos, 5) === peg$c179) {
                              s0 = peg$c179;
                              peg$currPos += 5;
                            } else {
                              s0 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c180); }
                            }
                            if (s0 === null) {
                              if (input.substr(peg$currPos, 6) === peg$c181) {
                                s0 = peg$c181;
                                peg$currPos += 6;
                              } else {
                                s0 = null;
                                if (peg$silentFails === 0) { peg$fail(peg$c182); }
                              }
                              if (s0 === null) {
                                if (input.substr(peg$currPos, 6) === peg$c183) {
                                  s0 = peg$c183;
                                  peg$currPos += 6;
                                } else {
                                  s0 = null;
                                  if (peg$silentFails === 0) { peg$fail(peg$c184); }
                                }
                                if (s0 === null) {
                                  if (input.substr(peg$currPos, 2) === peg$c185) {
                                    s0 = peg$c185;
                                    peg$currPos += 2;
                                  } else {
                                    s0 = null;
                                    if (peg$silentFails === 0) { peg$fail(peg$c186); }
                                  }
                                  if (s0 === null) {
                                    if (input.substr(peg$currPos, 2) === peg$c187) {
                                      s0 = peg$c187;
                                      peg$currPos += 2;
                                    } else {
                                      s0 = null;
                                      if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                    }
                                    if (s0 === null) {
                                      if (input.substr(peg$currPos, 5) === peg$c189) {
                                        s0 = peg$c189;
                                        peg$currPos += 5;
                                      } else {
                                        s0 = null;
                                        if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                      }
                                      if (s0 === null) {
                                        if (input.substr(peg$currPos, 5) === peg$c191) {
                                          s0 = peg$c191;
                                          peg$currPos += 5;
                                        } else {
                                          s0 = null;
                                          if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                        }
                                        if (s0 === null) {
                                          if (input.substr(peg$currPos, 3) === peg$c193) {
                                            s0 = peg$c193;
                                            peg$currPos += 3;
                                          } else {
                                            s0 = null;
                                            if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                          }
                                          if (s0 === null) {
                                            if (input.substr(peg$currPos, 6) === peg$c195) {
                                              s0 = peg$c195;
                                              peg$currPos += 6;
                                            } else {
                                              s0 = null;
                                              if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                            }
                                            if (s0 === null) {
                                              if (input.substr(peg$currPos, 3) === peg$c197) {
                                                s0 = peg$c197;
                                                peg$currPos += 3;
                                              } else {
                                                s0 = null;
                                                if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                              }
                                              if (s0 === null) {
                                                if (input.substr(peg$currPos, 2) === peg$c199) {
                                                  s0 = peg$c199;
                                                  peg$currPos += 2;
                                                } else {
                                                  s0 = null;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                                }
                                                if (s0 === null) {
                                                  if (input.substr(peg$currPos, 2) === peg$c201) {
                                                    s0 = peg$c201;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s0 = null;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                  }
                                                  if (s0 === null) {
                                                    if (input.substr(peg$currPos, 3) === peg$c203) {
                                                      s0 = peg$c203;
                                                      peg$currPos += 3;
                                                    } else {
                                                      s0 = null;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c204); }
                                                    }
                                                    if (s0 === null) {
                                                      if (input.substr(peg$currPos, 3) === peg$c205) {
                                                        s0 = peg$c205;
                                                        peg$currPos += 3;
                                                      } else {
                                                        s0 = null;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c206); }
                                                      }
                                                      if (s0 === null) {
                                                        if (input.substr(peg$currPos, 3) === peg$c207) {
                                                          s0 = peg$c207;
                                                          peg$currPos += 3;
                                                        } else {
                                                          s0 = null;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c208); }
                                                        }
                                                        if (s0 === null) {
                                                          if (input.substr(peg$currPos, 5) === peg$c209) {
                                                            s0 = peg$c209;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s0 = null;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c210); }
                                                          }
                                                          if (s0 === null) {
                                                            if (input.substr(peg$currPos, 5) === peg$c211) {
                                                              s0 = peg$c211;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s0 = null;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                            }
                                                            if (s0 === null) {
                                                              if (input.substr(peg$currPos, 3) === peg$c213) {
                                                                s0 = peg$c213;
                                                                peg$currPos += 3;
                                                              } else {
                                                                s0 = null;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c214); }
                                                              }
                                                              if (s0 === null) {
                                                                if (input.substr(peg$currPos, 5) === peg$c215) {
                                                                  s0 = peg$c215;
                                                                  peg$currPos += 5;
                                                                } else {
                                                                  s0 = null;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c216); }
                                                                }
                                                                if (s0 === null) {
                                                                  if (input.substr(peg$currPos, 8) === peg$c217) {
                                                                    s0 = peg$c217;
                                                                    peg$currPos += 8;
                                                                  } else {
                                                                    s0 = null;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c218); }
                                                                  }
                                                                  if (s0 === null) {
                                                                    if (input.substr(peg$currPos, 5) === peg$c219) {
                                                                      s0 = peg$c219;
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s0 = null;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c220); }
                                                                    }
                                                                    if (s0 === null) {
                                                                      if (input.substr(peg$currPos, 7) === peg$c221) {
                                                                        s0 = peg$c221;
                                                                        peg$currPos += 7;
                                                                      } else {
                                                                        s0 = null;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c222); }
                                                                      }
                                                                      if (s0 === null) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c223) {
                                                                          s0 = peg$c223;
                                                                          peg$currPos += 2;
                                                                        } else {
                                                                          s0 = null;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c224); }
                                                                        }
                                                                        if (s0 === null) {
                                                                          if (input.substr(peg$currPos, 2) === peg$c225) {
                                                                            s0 = peg$c225;
                                                                            peg$currPos += 2;
                                                                          } else {
                                                                            s0 = null;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c226); }
                                                                          }
                                                                          if (s0 === null) {
                                                                            if (input.substr(peg$currPos, 4) === peg$c227) {
                                                                              s0 = peg$c227;
                                                                              peg$currPos += 4;
                                                                            } else {
                                                                              s0 = null;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c228); }
                                                                            }
                                                                            if (s0 === null) {
                                                                              if (peg$c229.test(input.charAt(peg$currPos))) {
                                                                                s0 = input.charAt(peg$currPos);
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s0 = null;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c230); }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsedecimal();
      if (s0 === null) {
        s0 = peg$parseinteger();
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c154.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s3 !== null) {
        while (s3 !== null) {
          s2.push(s3);
          if (peg$c154.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c155); }
          }
        }
      } else {
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c232(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }

      return s0;
    }

    function peg$parsedecimal() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = [];
      if (peg$c154.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      while (s4 !== null) {
        s3.push(s4);
        if (peg$c154.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }
      }
      if (s3 !== null) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c234;
          peg$currPos++;
        } else {
          s4 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c235); }
        }
        if (s4 !== null) {
          s5 = [];
          if (peg$c154.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c155); }
          }
          if (s6 !== null) {
            while (s6 !== null) {
              s5.push(s6);
              if (peg$c154.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c155); }
              }
            }
          } else {
            s5 = peg$c0;
          }
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== null) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c236(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c233); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      peg$silentFails++;
      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c237;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c238); }
      }
      while (s1 !== null) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c237;
          peg$currPos++;
        } else {
          s1 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c238); }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }

      return s0;
    }


    	//all units in em
    	var operatorMargin = options.operatorMargin || 0.2; //padding around operators (i.e. +, -, *, | abs |)
    	var divisionLineHeight = options.divisionLineHeight || 0.1;  //thickness of the division line a/b
    	var subSupSize = options.subSupSize || 0.7;  //relative size of a sub- or super-script (i.e. 0.7 = x^y -> y is 70% of the size of x)
    	var subSupBase = options.subSupBase || 0.7;  //baseline of sub- or super-script. At 0.2, the bottom of the y is .2em down from the top of the x, and x_y the top of the y is .2 up from the bottom of the x)
    	
    	if (options.degMode && options.degMode == 'rad') options.degMode = 1;
    	else if (!options.degMode || options.degMode != 1) options.degMode = Math.PI / 180;
    	function zip(a, b, c, d)
    	{
    		if (typeof(a) == "string") return a;
    		if (typeof(b) == "string") return b;
    		if (typeof(c) == "string") return c;
    		var ret = [];
    		if (typeof(b) == "function")
    		{
    			for (i = 0; i < a.length; i++)
    				ret = ret.concat(b(a[i]));
    		}
    		else if (typeof(c) == "function")
    		{
    			for (i = 0; i < a.length; i++)
    				for (j = 0; j < b.length; j++)
    					ret = ret.concat(c(a[i], b[j]));
    		}
    		else if (typeof(d) == "function")
    		{
    			for (i = 0; i < a.length; i++)
    				for (j = 0; j < b.length; j++)
    					for (k = 0; j < c.length; k++)
    						ret = ret.concat(d(a[i], b[j], c[k]));
    		}
    		else ret = ["No function supplied to zip call in parser"];
    		return ret;
    	}
    	String.prototype.format = function() {
    		var args = arguments;
    		return this.replace(/{(\d+)}/g, function(match, number) { 
    		  return args[number] !== undefined ? args[number] : match;
    		});
    	};
    	function stripParens(s)
    	{
    		return s.replace(/^<div style="float:left;font-size:[0-9.]*em;line-height:1em">[({[⟨]?<\/div>/, "")
    						.replace(/<div style="float:left;font-size:[0-9.]*em;line-height:1em">[)\]}⟩]?<\/div>$/, "");
    	}
    	if (/\n$/.test(input) === false)
    		input += '\n';


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})();
